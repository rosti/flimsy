#!/bin/sh

FLIMSY_DIR="$HOME/.flimsy"

CLOJURES_DIR="$FLIMSY_DIR/clojures"
CLOJURE_LINK="$FLIMSY_DIR/clojure.jar"

[ -z $JAVA ] && JAVA="java"

# create the flimsy dir if it is not there
[ -d $FLIMSY_DIR ] || mkdir $FLIMSY_DIR

usage () {
	printf "flimsy <command> [options] [...]\n"
	printf "\n"
	printf "Where <command> can be:\n"
	printf "\thelp\t\t\t- Show this help message\n"
	printf "\tver|version\t\t- Show currently running clojure version\n"
	printf "\tlist\t\t\t- List all installed clojure versions\n"
	printf "\tinstall <version>\t- Install a given clojure version\n"
	printf "\tuse <version>\t\t- Use the given clojure version\n"
	printf "\trepl\t\t\t- Run REPL shell\n"
	printf "\trun <filename>\t\t- Run clojure file\n"
	printf "\teval <code>\t\t- Eval a single line of clojure code\n"
	printf "\n"
}

clojure_version_from_path () {
	basename $1 | awk '{ printf("%s", $sub(/.jar$/, "", $sub(/^clojure\-/, "", $0))) }'
}

current_clojure_version () {
	clojure_version_from_path $(readlink $CLOJURE_LINK)
}

clojure_version () {
	echo "clojure $(current_clojure_version)"
}

clojures_list () {
	local running_version=$(current_clojure_version)

	for clojure in $CLOJURES_DIR/clojure-*.jar; do

		local version=$(clojure_version_from_path $clojure)

		if [ "$version" = "$running_version" ]; then
			echo $version \*
		else
			echo $version
		fi
	done
}

install_clojure () {
	local version=$1

	if [ -z $version ]; then
		echo "Please, specify a version such as '1.5.1'"
		exit 1
	fi

	local clojure_jar="clojure-$version.jar"
	local clojure_path="$CLOJURES_DIR/$clojure_jar"
	local clojure_url="http://repo1.maven.org/maven2/org/clojure/clojure/$version/$clojure_jar"

	# create the clojures dir if it is not there
	[ -d $CLOJURES_DIR ] || mkdir $CLOJURES_DIR

	if [ -f $clojure_path ]; then
		echo "Clojure $version is already installed."
		echo "You can activate it with this command:"
		echo "flimsy use $version"
		exit 0
	fi

	exec wget -O $clojure_path $clojure_url
}

use_clojure () {
	local version=$1

	if [ -z $version ]; then
		echo "Please, specify a version such as '1.5.1'"
		exit 1
	fi

	local clojure_path="$CLOJURES_DIR/clojure-$version.jar"

	if ! [ -e $clojure_path ]; then
		echo "Clojure $version is not installed."
		echo "You can install it with this command:"
		echo "flimsy install $version"
		exit 1
	fi

	[ -e $CLOJURE_LINK ] && rm $CLOJURE_LINK

	exec ln -s $clojure_path $CLOJURE_LINK
}

run_clojure () {
	if ! [ -e $CLOJURE_LINK ]; then
		echo "You have not activated a particular version of Clojure"
		echo "You can use a pair of the 'install' and 'use' commands for this."
		exit 1
	fi

	exec $JAVA -cp $CLOJURE_LINK clojure.main "$@"
}

clojure_repl() {
	if [ -x $(which rlwrap) ]; then
		local version=$(current_clojure_version)
		local completions_dir="$FLIMSY_DIR/completions"
		local completions_file="$completions_dir/completions-$version.txt"
		local completions_gen="$completions_dir/completions_gen.clj"
		local history_file="$completions_dir/history-$version.txt"
		local breakchars="(){}[],^%$#@\"\";:''|\\"

		# Create the completions directory if it doesn't exist
		[ -d $completions_dir ] || mkdir $completions_dir

		# Write down the completions generation script if it doesn't exist
		if ! [ -e $completions_gen ]; then
			cat <<-EOT > $completions_gen
				(def completions (mapcat (comp keys ns-publics) (all-ns)))
				(with-open
				  [f (java.io.BufferedWriter.
				       (java.io.FileWriter. (first *command-line-args*)))]
				  (.write f (apply str (interpose \newline completions))))
			EOT
		fi

		# Generate new completions file if there isn't one already
		if ! [ -e $completions_file ]; then
			$0 run $completions_gen $completions_file
		fi

		exec rlwrap --remember -c -b "$breakchars" -f $completions_file \
			-H $history_file $0 run -r
	else
		echo "You don't have rlwrap installed. It is needed for REPL history,"
		echo "limited autocompletion, bracket matching and etc."
		echo "rlwrap can be readily installed on most Unix like OS-es"
		run_clojure -r
	fi
}

clojure_eval () {
	local one_liner="$1"

	if [ -z "$one_liner" ]; then
		echo "You have to specify a single parameter representing one line of code."
		echo "Example:"
		echo "flimsy eval '(prn \"Hello!\")'"
	fi

	run_clojure -e "$one_liner"
}

if [ $# -eq 0 ]; then
	usage
	exit 1
fi

case $1 in
	ver|version)
		clojure_version
		;;

	list)
		clojures_list
		;;

	install)
		install_clojure $2
		;;

	use)
		use_clojure $2
		;;

	repl)
		clojure_repl
		;;

	run)
		shift
		run_clojure "$@"
		;;

	eval)
		clojure_eval "$2"
		;;

	*|help)
		usage
		;;
esac

exit 0
